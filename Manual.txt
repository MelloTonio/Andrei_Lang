Source code -> Tokens -> AST(Abstract Syntax Tree)


let x = 5 + 5; -> LET,IDENTIFIER("x"),EQUAL_SIGN,INTEGER(5),PLUS_SIGN,INTEGER(5),SEMICOLON -> AST

Estrutura do Lexer:

* Com a função New, criamos um novo input (com o valor do texto recebido) e com ponteiros zerados

* Para cada letra do texto iremos definir um Token especifico e a cada vez que lemos uma letra
a função "readChar()" é chamada, avançando assim um "ponteiro" no texto

* Dentro da estrutura do lexer, temos ponteiros que indicam a posição atual e a proxima posição,
dessa forma, podemos facilmente capturar palavras completas ou até mesmo utilizar a proxima posição
para facilitar leituras como a do "!=" e a do "=="

* Inicialmente, verificamos se o caractere em questão é um simbolo, se sim, devolvemos o respectivo Token daquele
simbolo, se não, temos que jogar esse caractere em filtros, verificando se ele é um caractere (e até onde ele vai)
até por que, dessa forma podemos capturar uma palavra inteira, e para isso usamos o ramo default do switch, verificamos 
primeiro se ele se encaixa como caractere ou numero e dessa forma colocamos a função "readChar()" em um loop aonde
será possivel descobrir o inicio e o fim dessa palavra ou numero. Se a palavra em questão for uma keyword reservada,
devemos então devolver o token correspondente a essa keyword, se não, ele é apenas um identifier.

Estrutura do Repl:

* O repl apenas pega input do teclado e utiliza a função do lexer "nextToken()" para nos mostrar
quais tokens se encaixam naquilo que foi digitado pelo usuário.

Estrutura do Parser:

MoonvarStatements -> Assim como fizemos com os caracteres, teremos que fazer um parse nos tokens, para cada
moonvarStatement, teremos que formar "moonvar <identifier> = <expression>"

Parseando expressoes (prefix): Primeiramente, temos um map que conecta Tipos de Token com Funçoes, a partir disso
classificamos que quando a maquina se deparar com determinado tipo de token, ela deve executar a função
respectiva desse token, por exemplo "-5", que é uma expressão de prefix

ex: Registramos "p.registerPrefix(Token.MINUS, p.parsePrefixExpression)"
ao bater um "-" ele ira executar p.parsePrefixExpression, que guarda esse valor e chama o proximo token
que seria o token do 5 aonde está registrado de outra forma "p.registerPrefix(Token.INT, p.parseIntegerLiteral)"
ao executar p.parseIntegerLiteral, teremos o lado direito da operação, no caso o "5" como numero inteiro

Dessa forma no final nossa expressão ficara como AST{Token: Token.Minus, Operator: "-", Right: 5}

/////////// PRATT ///////////
Algoritmo de Parsing (Pratt)

Neste exemplo usaremos a expressão: "1 + 2 + 3", mas não devemos simplesmente realizar 1 + 2 + 3
e sim separar corretamente como a expressão deveria ocorrer, ex: ((1 + 2 ) + 3)

Quando digitamos "1 + 2 + 3", a função parseExpressionStatement chama parseExpression(LOWEST)
-> Neste caso p.CurrentToken = 1 e p.PeekToken = "+"

Então checamos por um prefixo associado com o token atual, no caso "Token.INT" que tem a função
(parseIntegerLiteral), que retorna um inteiro (1)

leftExp passa a ter o valor de 1, a partir dai entramos em um loop aonde será checado se
o proximo token é uma ";", que indica o final, ou se a precedencia dele é menor do que a do proximo

infix passa a ter o valor da função do token atual, no caso "+", chamamos a função para enxergar
o proximo token (p.CurrentToken = +, p.peekToken = "2")

ponto "marca" -> quando chamamos infix() passando como argumento leftExp, estamos pegando o 1 da função anterior e passando
para o infix como "expressão mais a esquerda", então salvamos a precedencia do "+", avançamos para o proximo token
(p.CurrentToken = 2, p.Peektoken = "+") e salvamos ainda nesta expressão, o expression.Right como sendo = p.parseExpression(precedence)

entrando na parseExpression novamente, agora com a precedencia do primeiro "+", porém antes nos deparamos
com mais uma "prefix" que busca pela função respectiva ao "2", novamente "Token.INT" que tem a função
(parseIntegerLiteral). leftExp agora tem o valor de 2 e ele em seguida é retornado pois, a precedencia
do segundo "+" é igual a do primeiro, e não menor

Voltando a função infix, a que chamou expression.Right = p.parseExpression(precedence), agora temos que o valor
do braço esquerdo é 1 e do direito é 2

O programa agora volta ao ponto "marca" só que com a leftExp tendo dois ramos (1, 2) e a precedencia ainda é lowest,
pois o acumulo de precedencia foi apenas no loop interno. Apos isso chamamos a função do proximo token 
que ainda é ("+"), avança o token (p.CurrentToken = +, p.Peektoken = "3") e cria mais um ramo de "leftexp" que executa infix((1,2))

Apos isso setamos a precedencia como a do "+", pulamos mais um token (p.CurrentToken = 3, p.Peektoken = ";") e Para
o ramo direito dessa expressão chamamos a função p.parseExpression(precedence of "+"), o que ira ocorrer sera que
prefix ira executar (parseIntegerLiteral) tendo o valor de 3 e como o p.PeekToken == ";" o loop não será executado e
assim retornaremos Exoression.Right = 3

No final nosso Ramo a esquerda tem 2 infix(1,2) e um ramo a direita também infix(3)


Novamente -> Algoritmo de Vaughan Pratt -> "3 + 4 - 5 * 5" -> (3 + 4)((-5) * 5)

- Tudo começa em "p.ParseExpressionStatement()" e em seguida ja caimos statement.Expression = p.parseExpression(LOWEST), iniciamos parseExpression com a menor precedencia

- Iniciamos a função prefix com 3 sendo o "p.currentToken.Type", ou seja, a função de parseIntegerLiteral será atribuida a prefix

- Guardamos a execução de prefix() em uma variavel leftExp, que nesse caso tera o valor 3, conseguido anteriormente da "parseIntegerLiteral"

- (currentToken = 3) (peekToken = "+") Entramos no loop, infix := p.infixParseFns[Token.PLUS_SIGN], infix := parseInfixExpression()

- (currentToken = +) (peekToken = "4") leftexp = infix(leftexp), ou seja, iniciaremos uma infix carregando o valor anterior (nesta caso 3)

- Left desta infix = 3 | precedence := precendencia (+) = 4 | (currentToken = 4) (peekToken = -) | iniciaremos o lado direito desta infix com  p.parseExpression(precendencia (+))

- Cairemos novamente no inicio de parseExpression, agora com a precedencia diferente, guardamos a execução de prefix() em uma variavel leftExp, que nesse caso tera o valor 4

- Porem ao tentar entrar no loop, percebe-se que a precedencia do "=" e do "-" são iguais, o loop não ira ocorrer e ira retornar o valor 4, o lado direito da primeira infix() sera 4

- 1º Infix (3 + 4) e então voltamos ao primeiro loop, agora com a precedencia = "LOWEST" -> (currentToken = -) (peekToken = 5)

- infix := p.infixParseFns[Token.MINUS] ->  infix := parseInfixExpression(1º Infix)

- 2º Infix terá como seu lado esquerdo ((3 + 4)), precedence := "-", (currentToken = 5) (peekToken = *), e a direita desta 2º infix será p.parseExpression("-")

- Voltaremos a parseExpression tendo leftExp = 5 (mesma operação do integer anterior), e entrando no loop (pois 4 (-) < 5 (*)), (currentToken = *) (peekToken = 5), infix = parseInfixExpression(5)

- Entrando no parseInfixExpression com o lado esquerdo = 5 | precedence := 5 (*), (currentToken = 5) (peekToken = EOF), o lado direito desta infix = p.parseExpression(precedence(*)) 

- infix = 5, sendo que não existe mais nada a frente. Ou seja, isso irá retornar la na segunda vez que ela for chama como uma expressão infix(5,5), que voltará mais um nivel e sera vista
como infix(infix(3,4), infix(5,5)) 

/////////// PRATT ///////////

A partir dai, todas as proximas funções vao basicamente se basear no Algoritmo de Pratt,
quando precisamos parsear uma expression, deixamos esse trabalho ao Algoritmo, a unica coisa
que nosso programa deve tomar cuidado é com abertura de parenteses e chaves e também conseguir
lidar com blockStatements. Comentarios foram adicionados nas funções necessarias

// Evaluation //

Nesta parte, transformamos os tokens, agora organizados de forma correta em valores reais

Primeiro temos que criar objetos para identificar cada elemento do nosso programa e dar eles sentido

Apos termos objetos referentes aos tres tipos, null, integer e boolean, precisamos criar uma arvore de decisoes
na qual de acordo com o "node.(type)",que é o tipo do node atual, avaliaremos a sentença de uma determinada forma

* Se ela for um inteiro, simplesmente retornaremos esse valor wrappeado num &object.Integer{Value: node.Value}

* Se for uma expressão, entraremos em um loop recursivo referente ao "tree-walking-interpreter", essa recursividade serve para buscar o case referente a aquela expressão

* Se for um boolean, será igual o inteiro, retornaremos &object.Boolean{Value: node.Value}

* Se for uma prefixExpression, iremos pegar o seu lado direito (que é ou um numero ou um booleano) e retornarmos evalPrefixExpression()
que vai tomar a decisão do que fazer quando o valor da esquerda é um "!" ou "-" e como ele deve se comportar perante ao valor da direita

* Se for uma infixEXpression, precisaremos avaliar tanto o lado direito como o esquerdo (separados), e depois avaliar esses dois lados juntos
Quando avaliamos eles juntos, verificamos se ambos são inteiros, se eles são "==" ou "!=", no primeiro caso delegamos ao "parseador" de inteiros
que avalia a condição em Bool(<,>,==,!=) ou não bool(+,-,/,*) e a partir disso retorna ou inteiro ou um valor booleano

* Se for um ifStatement, avaliamos a condição que nos foi passada, a partir disso verificamos se ela é verdadeira ou false
e então avaliamos cada ramo (se for verdadeiro ou se for falso)

* Se for um returnStatement, devemos avaliar o valor de retorno e dps fazer um wrap desse valor em um &object.ReturnValue{}

* Temos também de fazer com que o return dentro de um block seja mais "importante" que um de fora, para isso criamos um loop
aonde na parte de fora:

Parte do programa:
if returnValue, ok := result.(*object.ReturnValue); ok {
    return returnValue.Value}

Parte do BlockStatement:
if result !=nil && result.Type() == object.RETURN_VALUE_OBJ {
    return result}

ou seja, primeiro checamos por return dentro do bloco, se caso ele não ocorrer, eventualmente chegaremos ao return de fora mas
se o de dentro chegar antes, precisamos retornar imediatamente (ao macaco)

* MoonvarStatement -> Para salvarmos variaveis, temos que criar um hash no environment pra poder "lembrar" o que cara variavel significa